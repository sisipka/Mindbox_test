apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-webapp # Название deployment
  labels:
    app: my-webapp # Метка для приложения
spec:
  replicas: 4 # по результатам нагрузочного теста известно, что 4 пода справляются с пиковой нагрузкой
  selector:
    matchLabels:
      app: my-webapp # Селектор для подов
  template:
    metadata:
      labels:
        app: my-webapp # Метка для подов
    spec:
      affinity: # поды с меткой app: my-app должны быть размещены на узлах, которые находятся в разных зонах доступности
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - my-webapp
            topologyKey: "failure-domain.beta.kubernetes.io/zone" # позволяет указывать предпочтения при размещении подов на узлах, исходя из топологии кластера
      containers:
      - name: my-webapp # Название контейнера
        image: my-webapp:latest # Docker-образ для контейнера
        readinessProbe: # проверяет, готово ли приложение обрабатывать запросы, и если оно не готово, то оно не будет включено в сервис-балансировщик, пока не станет готовым
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 5
        resources: # на первые запросы приложению требуется значительно больше ресурсов CPU, в дальнейшем потребление ровное в районе 0.1 CPU. По памяти всегда “ровно” в районе 128M memory
          requests: # Запросы ресурсов
            cpu: 0.1
            memory: 128Mi
          limits: # Лимиты ресурсов
            cpu: 0.4
            memory: 128Mi
        ports:
        - containerPort: 80 # Порт, на котором приложение слушает запросы

---
apiVersion: autoscaling/v2beta2 # приложение имеет дневной цикл по нагрузке – ночью запросов на порядки меньше, пик – днём
kind: HorizontalPodAutoscaler # автоматически увеличивает или уменьшает количество реплик Deployment в зависимости от метрик, таких как использование CPU
metadata:
  name: my-webapp-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-webapp
  minReplicas: 1
  maxReplicas: 4
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80 # задает процентное значение использования ресурса, которое HPA будет пытаться поддерживать в каждом поде

---
apiVersion: v1
kind: Service
metadata:
  name: my-webapp-service
spec:
  type: LoadBalancer
  selector:
    app: my-webapp
  ports:
  - name: http
    port: 80
    targetPort: 80
